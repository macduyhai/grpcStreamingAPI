// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/ewallet/ewalletpb.proto

package service_ewallet

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{0}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (*HelloRequest) XXX_MessageName() string {
	return "service.ewallet.HelloRequest"
}

type HelloResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResponse) Reset()         { *m = HelloResponse{} }
func (m *HelloResponse) String() string { return proto.CompactTextString(m) }
func (*HelloResponse) ProtoMessage()    {}
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{1}
}
func (m *HelloResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResponse.Merge(m, src)
}
func (m *HelloResponse) XXX_Size() int {
	return m.Size()
}
func (m *HelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResponse proto.InternalMessageInfo

func (m *HelloResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (*HelloResponse) XXX_MessageName() string {
	return "service.ewallet.HelloResponse"
}

type Request struct {
	Numbers              []int32  `protobuf:"varint,1,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{2}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetNumbers() []int32 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

func (*Request) XXX_MessageName() string {
	return "service.ewallet.Request"
}

type Response struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{3}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (*Response) XXX_MessageName() string {
	return "service.ewallet.Response"
}

type RequestAverange struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestAverange) Reset()         { *m = RequestAverange{} }
func (m *RequestAverange) String() string { return proto.CompactTextString(m) }
func (*RequestAverange) ProtoMessage()    {}
func (*RequestAverange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{4}
}
func (m *RequestAverange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAverange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAverange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestAverange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAverange.Merge(m, src)
}
func (m *RequestAverange) XXX_Size() int {
	return m.Size()
}
func (m *RequestAverange) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAverange.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAverange proto.InternalMessageInfo

func (m *RequestAverange) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (*RequestAverange) XXX_MessageName() string {
	return "service.ewallet.RequestAverange"
}

type ResponseAverange struct {
	Result               float32  `protobuf:"fixed32,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseAverange) Reset()         { *m = ResponseAverange{} }
func (m *ResponseAverange) String() string { return proto.CompactTextString(m) }
func (*ResponseAverange) ProtoMessage()    {}
func (*ResponseAverange) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{5}
}
func (m *ResponseAverange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseAverange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseAverange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseAverange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseAverange.Merge(m, src)
}
func (m *ResponseAverange) XXX_Size() int {
	return m.Size()
}
func (m *ResponseAverange) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseAverange.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseAverange proto.InternalMessageInfo

func (m *ResponseAverange) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (*ResponseAverange) XXX_MessageName() string {
	return "service.ewallet.ResponseAverange"
}

type RequestFindMax struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestFindMax) Reset()         { *m = RequestFindMax{} }
func (m *RequestFindMax) String() string { return proto.CompactTextString(m) }
func (*RequestFindMax) ProtoMessage()    {}
func (*RequestFindMax) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{6}
}
func (m *RequestFindMax) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestFindMax) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestFindMax.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestFindMax) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestFindMax.Merge(m, src)
}
func (m *RequestFindMax) XXX_Size() int {
	return m.Size()
}
func (m *RequestFindMax) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestFindMax.DiscardUnknown(m)
}

var xxx_messageInfo_RequestFindMax proto.InternalMessageInfo

func (m *RequestFindMax) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (*RequestFindMax) XXX_MessageName() string {
	return "service.ewallet.RequestFindMax"
}

type ResponseFindmax struct {
	Max                  int64    `protobuf:"varint,1,opt,name=Max,proto3" json:"Max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseFindmax) Reset()         { *m = ResponseFindmax{} }
func (m *ResponseFindmax) String() string { return proto.CompactTextString(m) }
func (*ResponseFindmax) ProtoMessage()    {}
func (*ResponseFindmax) Descriptor() ([]byte, []int) {
	return fileDescriptor_a866b226841aaa66, []int{7}
}
func (m *ResponseFindmax) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseFindmax) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseFindmax.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseFindmax) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseFindmax.Merge(m, src)
}
func (m *ResponseFindmax) XXX_Size() int {
	return m.Size()
}
func (m *ResponseFindmax) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseFindmax.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseFindmax proto.InternalMessageInfo

func (m *ResponseFindmax) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (*ResponseFindmax) XXX_MessageName() string {
	return "service.ewallet.ResponseFindmax"
}
func init() {
	proto.RegisterType((*HelloRequest)(nil), "service.ewallet.HelloRequest")
	golang_proto.RegisterType((*HelloRequest)(nil), "service.ewallet.HelloRequest")
	proto.RegisterType((*HelloResponse)(nil), "service.ewallet.HelloResponse")
	golang_proto.RegisterType((*HelloResponse)(nil), "service.ewallet.HelloResponse")
	proto.RegisterType((*Request)(nil), "service.ewallet.Request")
	golang_proto.RegisterType((*Request)(nil), "service.ewallet.Request")
	proto.RegisterType((*Response)(nil), "service.ewallet.Response")
	golang_proto.RegisterType((*Response)(nil), "service.ewallet.Response")
	proto.RegisterType((*RequestAverange)(nil), "service.ewallet.RequestAverange")
	golang_proto.RegisterType((*RequestAverange)(nil), "service.ewallet.RequestAverange")
	proto.RegisterType((*ResponseAverange)(nil), "service.ewallet.ResponseAverange")
	golang_proto.RegisterType((*ResponseAverange)(nil), "service.ewallet.ResponseAverange")
	proto.RegisterType((*RequestFindMax)(nil), "service.ewallet.RequestFindMax")
	golang_proto.RegisterType((*RequestFindMax)(nil), "service.ewallet.RequestFindMax")
	proto.RegisterType((*ResponseFindmax)(nil), "service.ewallet.ResponseFindmax")
	golang_proto.RegisterType((*ResponseFindmax)(nil), "service.ewallet.ResponseFindmax")
}

func init() { proto.RegisterFile("service/ewallet/ewalletpb.proto", fileDescriptor_a866b226841aaa66) }
func init() {
	golang_proto.RegisterFile("service/ewallet/ewalletpb.proto", fileDescriptor_a866b226841aaa66)
}

var fileDescriptor_a866b226841aaa66 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0xeb, 0x5d, 0x68, 0xca, 0x40, 0xe9, 0xca, 0x48, 0x55, 0x88, 0x20, 0x5d, 0xdc, 0xcb,
	0x16, 0xa9, 0xc9, 0x0a, 0x9e, 0xa0, 0x20, 0x01, 0x97, 0xa2, 0x2a, 0x47, 0x24, 0x0e, 0xce, 0x32,
	0xb8, 0x11, 0x49, 0x1c, 0x6c, 0x67, 0xd9, 0x33, 0xaf, 0xc0, 0x0b, 0x71, 0xec, 0x11, 0x89, 0x17,
	0x40, 0x5b, 0x9e, 0x81, 0x33, 0x8a, 0x63, 0xaf, 0x56, 0xd0, 0x9c, 0xe2, 0x5f, 0xf3, 0xe5, 0x1b,
	0x67, 0x26, 0x70, 0xa4, 0x51, 0x2d, 0x8b, 0x05, 0xa6, 0xf8, 0x85, 0x97, 0x25, 0x1a, 0xff, 0x6c,
	0xf2, 0xa4, 0x51, 0xd2, 0x48, 0x7a, 0xe0, 0x80, 0xc4, 0x15, 0xa2, 0x53, 0x51, 0x98, 0xcb, 0x36,
	0x4f, 0x16, 0xb2, 0x4a, 0x85, 0x14, 0x32, 0xb5, 0x5c, 0xde, 0x7e, 0xb4, 0xc9, 0x06, 0x7b, 0xea,
	0xdf, 0x8f, 0x1e, 0x09, 0x29, 0x45, 0x89, 0x29, 0x6f, 0x8a, 0x94, 0xd7, 0xb5, 0x34, 0xdc, 0x14,
	0xb2, 0xd6, 0x7d, 0x95, 0x31, 0xb8, 0xf7, 0x06, 0xcb, 0x52, 0x66, 0xf8, 0xb9, 0x45, 0x6d, 0x28,
	0x85, 0x5b, 0x35, 0xaf, 0x30, 0x24, 0x53, 0x32, 0xbb, 0x93, 0xd9, 0x33, 0x3b, 0x81, 0x7d, 0xc7,
	0xe8, 0x46, 0xd6, 0x1a, 0x69, 0x08, 0x41, 0x85, 0x5a, 0x73, 0xe1, 0x39, 0x1f, 0xd9, 0x31, 0x04,
	0xde, 0x14, 0x42, 0x50, 0xb7, 0x55, 0x8e, 0x4a, 0x87, 0x64, 0x3a, 0x9e, 0xdd, 0xce, 0x7c, 0x64,
	0x0c, 0xf6, 0x36, 0xaa, 0x43, 0xd8, 0x55, 0xa8, 0xdb, 0xd2, 0x38, 0x93, 0x4b, 0xec, 0x04, 0x0e,
	0x9c, 0xe8, 0x6c, 0x89, 0x8a, 0xd7, 0xc2, 0xa2, 0xbd, 0xc1, 0xa2, 0xe3, 0xcc, 0x25, 0xf6, 0x14,
	0x26, 0x5e, 0xb7, 0xcd, 0x6e, 0x69, 0x47, 0x1b, 0xed, 0x0c, 0xee, 0x3b, 0xed, 0xab, 0xa2, 0xfe,
	0x70, 0xce, 0x57, 0x83, 0xd6, 0xe3, 0xee, 0x02, 0xbd, 0xb5, 0x43, 0x2b, 0xbe, 0xa2, 0x13, 0x18,
	0x9f, 0xf3, 0x95, 0xe3, 0xba, 0xe3, 0xb3, 0x3f, 0x23, 0xd8, 0x3b, 0x6b, 0x8a, 0x0b, 0xbb, 0xa8,
	0xf7, 0x10, 0xbc, 0x56, 0x88, 0x06, 0x15, 0x7d, 0x9c, 0xfc, 0xb3, 0xb4, 0x64, 0x7b, 0xc8, 0x51,
	0x3c, 0x54, 0xee, 0xfb, 0xb1, 0x07, 0x5f, 0x7f, 0xfe, 0xfe, 0x36, 0xda, 0xa7, 0x77, 0xd3, 0xe5,
	0x3c, 0x15, 0xce, 0xb9, 0x80, 0xc9, 0xcb, 0x4b, 0x5c, 0x7c, 0xba, 0x50, 0x45, 0x85, 0x6f, 0xed,
	0x25, 0x69, 0xf8, 0x9f, 0xc8, 0xb7, 0x78, 0x78, 0x43, 0xc5, 0xd9, 0x43, 0x6b, 0xa7, 0x6c, 0xd2,
	0xd9, 0x9b, 0xce, 0x76, 0xda, 0x7f, 0xf3, 0x9c, 0xd0, 0x0c, 0x02, 0x3b, 0x43, 0x81, 0x74, 0x3a,
	0xe4, 0xf6, 0x43, 0x8e, 0x9e, 0x0c, 0xf6, 0xf0, 0x08, 0xdb, 0x99, 0x59, 0xa7, 0x1f, 0xf6, 0xd1,
	0x90, 0xd3, 0x01, 0xd1, 0x74, 0x50, 0xe9, 0x96, 0xd0, 0x19, 0xe7, 0xe4, 0xc5, 0xe1, 0xd5, 0x3a,
	0x26, 0x3f, 0xd6, 0x31, 0xf9, 0xb5, 0x8e, 0xc9, 0xf7, 0xeb, 0x98, 0x5c, 0x5d, 0xc7, 0xe4, 0xdd,
	0x4e, 0xbe, 0x6b, 0xff, 0xea, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xda, 0xb4, 0xf9, 0xd1,
	0x56, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiProtoClient is the client API for ApiProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiProtoClient interface {
	Greeter(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	CheckPrimeNumber(ctx context.Context, in *Request, opts ...grpc.CallOption) (ApiProto_CheckPrimeNumberClient, error)
	Average(ctx context.Context, opts ...grpc.CallOption) (ApiProto_AverageClient, error)
	FindMax(ctx context.Context, opts ...grpc.CallOption) (ApiProto_FindMaxClient, error)
}

type apiProtoClient struct {
	cc *grpc.ClientConn
}

func NewApiProtoClient(cc *grpc.ClientConn) ApiProtoClient {
	return &apiProtoClient{cc}
}

func (c *apiProtoClient) Greeter(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/service.ewallet.ApiProto/Greeter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiProtoClient) CheckPrimeNumber(ctx context.Context, in *Request, opts ...grpc.CallOption) (ApiProto_CheckPrimeNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApiProto_serviceDesc.Streams[0], "/service.ewallet.ApiProto/CheckPrimeNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiProtoCheckPrimeNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiProto_CheckPrimeNumberClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type apiProtoCheckPrimeNumberClient struct {
	grpc.ClientStream
}

func (x *apiProtoCheckPrimeNumberClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiProtoClient) Average(ctx context.Context, opts ...grpc.CallOption) (ApiProto_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApiProto_serviceDesc.Streams[1], "/service.ewallet.ApiProto/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiProtoAverageClient{stream}
	return x, nil
}

type ApiProto_AverageClient interface {
	Send(*RequestAverange) error
	CloseAndRecv() (*ResponseAverange, error)
	grpc.ClientStream
}

type apiProtoAverageClient struct {
	grpc.ClientStream
}

func (x *apiProtoAverageClient) Send(m *RequestAverange) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiProtoAverageClient) CloseAndRecv() (*ResponseAverange, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseAverange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiProtoClient) FindMax(ctx context.Context, opts ...grpc.CallOption) (ApiProto_FindMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApiProto_serviceDesc.Streams[2], "/service.ewallet.ApiProto/FindMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiProtoFindMaxClient{stream}
	return x, nil
}

type ApiProto_FindMaxClient interface {
	Send(*RequestFindMax) error
	Recv() (*ResponseFindmax, error)
	grpc.ClientStream
}

type apiProtoFindMaxClient struct {
	grpc.ClientStream
}

func (x *apiProtoFindMaxClient) Send(m *RequestFindMax) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiProtoFindMaxClient) Recv() (*ResponseFindmax, error) {
	m := new(ResponseFindmax)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiProtoServer is the server API for ApiProto service.
type ApiProtoServer interface {
	Greeter(context.Context, *HelloRequest) (*HelloResponse, error)
	CheckPrimeNumber(*Request, ApiProto_CheckPrimeNumberServer) error
	Average(ApiProto_AverageServer) error
	FindMax(ApiProto_FindMaxServer) error
}

// UnimplementedApiProtoServer can be embedded to have forward compatible implementations.
type UnimplementedApiProtoServer struct {
}

func (*UnimplementedApiProtoServer) Greeter(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greeter not implemented")
}
func (*UnimplementedApiProtoServer) CheckPrimeNumber(req *Request, srv ApiProto_CheckPrimeNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckPrimeNumber not implemented")
}
func (*UnimplementedApiProtoServer) Average(srv ApiProto_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (*UnimplementedApiProtoServer) FindMax(srv ApiProto_FindMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMax not implemented")
}

func RegisterApiProtoServer(s *grpc.Server, srv ApiProtoServer) {
	s.RegisterService(&_ApiProto_serviceDesc, srv)
}

func _ApiProto_Greeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiProtoServer).Greeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ewallet.ApiProto/Greeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiProtoServer).Greeter(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiProto_CheckPrimeNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiProtoServer).CheckPrimeNumber(m, &apiProtoCheckPrimeNumberServer{stream})
}

type ApiProto_CheckPrimeNumberServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type apiProtoCheckPrimeNumberServer struct {
	grpc.ServerStream
}

func (x *apiProtoCheckPrimeNumberServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ApiProto_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiProtoServer).Average(&apiProtoAverageServer{stream})
}

type ApiProto_AverageServer interface {
	SendAndClose(*ResponseAverange) error
	Recv() (*RequestAverange, error)
	grpc.ServerStream
}

type apiProtoAverageServer struct {
	grpc.ServerStream
}

func (x *apiProtoAverageServer) SendAndClose(m *ResponseAverange) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiProtoAverageServer) Recv() (*RequestAverange, error) {
	m := new(RequestAverange)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApiProto_FindMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiProtoServer).FindMax(&apiProtoFindMaxServer{stream})
}

type ApiProto_FindMaxServer interface {
	Send(*ResponseFindmax) error
	Recv() (*RequestFindMax, error)
	grpc.ServerStream
}

type apiProtoFindMaxServer struct {
	grpc.ServerStream
}

func (x *apiProtoFindMaxServer) Send(m *ResponseFindmax) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiProtoFindMaxServer) Recv() (*RequestFindMax, error) {
	m := new(RequestFindMax)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ApiProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ewallet.ApiProto",
	HandlerType: (*ApiProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeter",
			Handler:    _ApiProto_Greeter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckPrimeNumber",
			Handler:       _ApiProto_CheckPrimeNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _ApiProto_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMax",
			Handler:       _ApiProto_FindMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service/ewallet/ewalletpb.proto",
}

func (m *HelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEwalletpb(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintEwalletpb(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Numbers) > 0 {
		dAtA2 := make([]byte, len(m.Numbers)*10)
		var j1 int
		for _, num1 := range m.Numbers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEwalletpb(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintEwalletpb(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestAverange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAverange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAverange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Number != 0 {
		i = encodeVarintEwalletpb(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseAverange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAverange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseAverange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Result))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *RequestFindMax) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFindMax) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestFindMax) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Number != 0 {
		i = encodeVarintEwalletpb(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseFindmax) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFindmax) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseFindmax) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Max != 0 {
		i = encodeVarintEwalletpb(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEwalletpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovEwalletpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEwalletpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelloResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEwalletpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Numbers) > 0 {
		l = 0
		for _, e := range m.Numbers {
			l += sovEwalletpb(uint64(e))
		}
		n += 1 + sovEwalletpb(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovEwalletpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestAverange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovEwalletpb(uint64(m.Number))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseAverange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestFindMax) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovEwalletpb(uint64(m.Number))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseFindmax) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Max != 0 {
		n += 1 + sovEwalletpb(uint64(m.Max))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEwalletpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEwalletpb(x uint64) (n int) {
	return sovEwalletpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEwalletpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEwalletpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEwalletpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Numbers = append(m.Numbers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEwalletpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEwalletpb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEwalletpb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Numbers) == 0 {
					m.Numbers = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEwalletpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Numbers = append(m.Numbers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Numbers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEwalletpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAverange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAverange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAverange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAverange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAverange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAverange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Result = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFindMax) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFindMax: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFindMax: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFindmax) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFindmax: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFindmax: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEwalletpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEwalletpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEwalletpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEwalletpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEwalletpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEwalletpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEwalletpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEwalletpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEwalletpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEwalletpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEwalletpb = fmt.Errorf("proto: unexpected end of group")
)
